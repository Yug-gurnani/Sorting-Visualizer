{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","sortingVisualizer/sortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","heapsortanimations","arr","count","maxHeap","Heap","maxComparator","pop","SortingVisualizer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resetArray","randomIntFromInterval","setState","_loop","arrayBars","document","getElementsByClassName","_animations$i","slicedToArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","_animations$i2","newHeight","height","concat","tmp","bubblesortanimations","_loop2","_animations$i3","_animations$i4","newHeight1","newHeight2","_animations$i5","key","insertionsortanimations","_loop3","_animations$i6","_animations$i7","_heapsortanimations","_heapsortanimations2","_loop4","_animations$i8","_loop5","_animations$_i","_animations$_i2","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","_this2","navbarInstance","react_default","createElement","Fragment","Navbar","bg","variant","onClick","window","location","reload","Brand","href","Nav","className","mergeSort","insertionSort","heapSort","bubbleSort","map","value","idx","React","Component","min","max","random","arrayOne","arrayTwo","App","sortingVisualizer_SortingVisualizer","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.caa35112.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import Heap from 'heap-js';\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      animations.push([i, j]);\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j]);\r\n      animations.push([j, j]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\nexport function bubblesortanimations(arr) {\r\n  const animations = [];\r\n  for (let i = 0;i < arr.length;i++){\r\n    for (let j = 0;j < arr.length-i-1;j++){\r\n       animations.push([j,j+1])\r\n       animations.push([j,j+1])\r\n       if (arr[j] > arr[j+1]){\r\n        animations.push([j,j+1,arr[j],arr[j+1]])\r\n        let tmp = arr[j+1];\r\n        arr[j+1] = arr[j];\r\n        arr[j] = tmp;\r\n      }\r\n      else {\r\n        animations.push([j,arr[j]])\r\n      } \r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport function insertionsortanimations(arr){\r\n  const animations = [];\r\n  for (let i = 1; i < arr.length;i++){\r\n    var j = i-1\r\n    \r\n    var key = arr[i]\r\n    while (j >= 0 && key < arr[j]){\r\n      animations.push([j+1,j]);\r\n      animations.push([j+1,j]);\r\n      animations.push([j+1,arr[j]]);\r\n      arr[j+1] = arr[j];\r\n      j -= 1;\r\n    }\r\n    animations.push([i,j+1]);\r\n    animations.push([i,j+1]);\r\n    animations.push([j+1,key])\r\n    arr[j+1] = key;\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nexport function heapsortanimations(arr) {\r\n  const animations = [];\r\n  let count = 0\r\n  const maxHeap = new Heap(Heap.maxComparator);\r\n  for (let i = 0;i<arr.length-1;i++){\r\n    animations.push([i,i+1]);\r\n    count += 1\r\n    maxHeap.push(arr[i]);\r\n  }\r\n  maxHeap.push(arr[arr.length-1])\r\n  animations.push([arr.length-1,arr.length-1])\r\n  count += 1\r\n  for (let i = arr.length - 1;i >= 0;i--){\r\n  \r\n    arr[i] = maxHeap.pop();\r\n\r\n    animations.push([i,i])\r\n    animations.push([i,i])\r\n    animations.push([i,arr[i]])\r\n    \r\n  }\r\n  return [animations,count];\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport {insertionsortanimations,bubblesortanimations, getMergeSortAnimations, heapsortanimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './sortingVisualizer.css';\r\nimport { Button, Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\r\nimport { Form, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n// Change this value for the numbe of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 123;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR =\"#6930c3\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 700));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 7);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 7);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  bubbleSort() {\r\n    //console.log(this.state.array)\r\n    const animations = bubblesortanimations(this.state.array);\r\n    \r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i] === null){\r\n        continue;\r\n      }\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 10);\r\n      } else {\r\n        if (animations[i].length === 4) {\r\n          setTimeout(() => {\r\n            const [barOneIdx,barTwoIdx, newHeight1,newHeight2] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barOneStyle.height = `${newHeight2}px`;\r\n            barTwoStyle.height = `${newHeight1}px`;\r\n          }, i * 10);\r\n\r\n        }else{\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 10);\r\n      }\r\n    }\r\n    }\r\n}\r\n\r\n\r\n  insertionSort() {\r\n    const animations = insertionsortanimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 4);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const [animations,count] = heapsortanimations(this.state.array)\r\n    for (let i = 0;i< count;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n       const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 18);\r\n      \r\n    }\r\n    for (let i = count + 1; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 18);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 18);\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const arr = heapsortanimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, arr));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n    const navbarInstance = (\r\n        <>\r\n  <Navbar bg=\"dark\" variant=\"dark\">\r\n    \r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    <button onClick={() => refreshPage()}>Generate New Array</button>\r\n    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; \r\n    <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n    \r\n    <Nav className=\"ml-auto\">\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n    </Nav>\r\n    \r\n  </Navbar>\r\n  \r\n</>\r\n\r\n    );\r\n    return (\r\n      <div>\r\n\r\n        {navbarInstance}\r\n      <div className=\"array-container\">\r\n          \r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n\r\n            }}></div>\r\n            \r\n\r\n        ))}\r\n    \r\n        \r\n        \r\n        \r\n        {/* \\*<button onClick={() => this.testSortingAlgorithms()}>\r\n          //Test Sorting Algorithms\r\n        </button> */}\r\n      </div>\r\n      </div>  \r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction refreshPage() {\r\n  window.location.reload(false);\r\n}\r\nconst MyComponent = () => {\r\n\r\n  const [ value, setValue ] = useState(0); \r\n\r\n  return (\r\n    <RangeSlider\r\n      value={value}\r\n      onChange={changeEvent => setValue(changeEvent.target.value)}\r\n    />\r\n  );\r\n\r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}