[{"C:\\Users\\YUG\\sorting_visualizer\\src\\index.js":"1","C:\\Users\\YUG\\sorting_visualizer\\src\\App.js":"2","C:\\Users\\YUG\\sorting_visualizer\\src\\reportWebVitals.js":"3","C:\\Users\\YUG\\sorting_visualizer\\src\\sortingVisualizer\\sortingVisualizer.jsx":"4","C:\\Users\\YUG\\sorting_visualizer\\src\\sortingAlgorithms\\sortingAlgorithms.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":288,"mtime":1611414727474,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":9409,"mtime":1611917619895,"results":"10","hashOfConfig":"7"},{"size":3303,"mtime":1611917058382,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"pf60sz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\YUG\\sorting_visualizer\\src\\index.js",[],["25","26"],"C:\\Users\\YUG\\sorting_visualizer\\src\\App.js",["27"],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\YUG\\sorting_visualizer\\src\\reportWebVitals.js",[],"C:\\Users\\YUG\\sorting_visualizer\\src\\sortingVisualizer\\sortingVisualizer.jsx",["28","29","30","31","32","33","34","35","36"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport {insertionsortanimations,bubblesortanimations, getMergeSortAnimations, heapsortanimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './sortingVisualizer.css';\r\nimport { Button, Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\r\nimport { Form, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n<link\r\n  rel=\"stylesheet\"\r\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n  crossorigin=\"anonymous\"\r\n/>\r\n\r\n// Change this value for the numbe of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 123;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR =\"#6930c3\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 700));\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 7);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 7);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  bubbleSort() {\r\n    //console.log(this.state.array)\r\n    const animations = bubblesortanimations(this.state.array);\r\n    \r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      if (animations[i] === null){\r\n        continue;\r\n      }\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 10);\r\n      } else {\r\n        if (animations[i].length === 4) {\r\n          setTimeout(() => {\r\n            const [barOneIdx,barTwoIdx, newHeight1,newHeight2] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            barOneStyle.height = `${newHeight2}px`;\r\n            barTwoStyle.height = `${newHeight1}px`;\r\n          }, i * 10);\r\n\r\n        }else{\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 10);\r\n      }\r\n    }\r\n    }\r\n}\r\n\r\n\r\n  insertionSort() {\r\n    const animations = insertionsortanimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 4);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 4);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSort() {\r\n    const [animations,count] = heapsortanimations(this.state.array)\r\n    for (let i = 0;i< count;i++){\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n       const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 18);\r\n      \r\n    }\r\n    for (let i = count + 1; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      \r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 18);\r\n      } else {\r\n        \r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 18);\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const arr = heapsortanimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, arr));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n    const navbarInstance = (\r\n        <>\r\n  <Navbar bg=\"dark\" variant=\"dark\">\r\n    \r\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n    <button onClick={() => refreshPage()}>Generate New Array</button>\r\n    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; \r\n    <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n    \r\n    <Nav className=\"ml-auto\">\r\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n        &nbsp;&nbsp;&nbsp; \r\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n    </Nav>\r\n    \r\n  </Navbar>\r\n  \r\n</>\r\n\r\n    );\r\n    return (\r\n      <div>\r\n\r\n        {navbarInstance}\r\n      <div className=\"array-container\">\r\n          \r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n\r\n            }}></div>\r\n            \r\n\r\n        ))}\r\n    \r\n        \r\n        \r\n        \r\n        {/* \\*<button onClick={() => this.testSortingAlgorithms()}>\r\n          //Test Sorting Algorithms\r\n        </button> */}\r\n      </div>\r\n      </div>  \r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction refreshPage() {\r\n  window.location.reload(false);\r\n}\r\nconst MyComponent = () => {\r\n\r\n  const [ value, setValue ] = useState(0); \r\n\r\n  return (\r\n    <RangeSlider\r\n      value={value}\r\n      onChange={changeEvent => setValue(changeEvent.target.value)}\r\n    />\r\n  );\r\n\r\n};","C:\\Users\\YUG\\sorting_visualizer\\src\\sortingAlgorithms\\sortingAlgorithms.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":8,"nodeType":"43","messageId":"44","endLine":2,"endColumn":12},{"ruleId":"41","severity":1,"message":"45","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":16},{"ruleId":"41","severity":1,"message":"46","line":7,"column":31,"nodeType":"43","messageId":"44","endLine":7,"endColumn":38},{"ruleId":"41","severity":1,"message":"47","line":7,"column":40,"nodeType":"43","messageId":"44","endLine":7,"endColumn":51},{"ruleId":"41","severity":1,"message":"48","line":7,"column":53,"nodeType":"43","messageId":"44","endLine":7,"endColumn":61},{"ruleId":"41","severity":1,"message":"49","line":8,"column":10,"nodeType":"43","messageId":"44","endLine":8,"endColumn":14},{"ruleId":"41","severity":1,"message":"50","line":8,"column":16,"nodeType":"43","messageId":"44","endLine":8,"endColumn":25},{"ruleId":"41","severity":1,"message":"51","line":8,"column":27,"nodeType":"43","messageId":"44","endLine":8,"endColumn":38},{"ruleId":"41","severity":1,"message":"52","line":8,"column":40,"nodeType":"43","messageId":"44","endLine":8,"endColumn":52},{"ruleId":"41","severity":1,"message":"53","line":272,"column":7,"nodeType":"43","messageId":"44","endLine":272,"endColumn":18},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'NavItem' is defined but never used.","'NavDropdown' is defined but never used.","'MenuItem' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'FormControl' is defined but never used.","'ControlLabel' is defined but never used.","'MyComponent' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]